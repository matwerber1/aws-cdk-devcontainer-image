#!/usr/bin/env python3
import argparse
import getpass
import os
import subprocess
import sys
from configparser import ConfigParser
from dataclasses import dataclass
from typing import Literal, Optional, Union

import boto3
from botocore.exceptions import (NoAuthTokenError, SSOError, SSOTokenLoadError,
                                 TokenRetrievalError,
                                 UnauthorizedSSOTokenError)

WORKSPACE_DIR: str = os.environ["DEVCONTAINER_WORKSPACE_FOLDER"]
NICKNAMES_FILE: str = f"{WORKSPACE_DIR}/.awsprofile"
AWS_CONFIG_FILE: str = os.path.expanduser("~/.aws/config")

AWS_CONFIG = ConfigParser()
AWS_CONFIG.read(AWS_CONFIG_FILE)


def file_exists(file_path: str) -> bool:
    """Check if file exists"""
    if os.path.exists(file_path):
        return True
    else:
        return False


def get_aws_profile_from_nickname(nickname: str) -> Union[str, None]:
    "Look up AWS Profile for a profile nickname from .awsprofile in project root, if available."
    if file_exists(NICKNAMES_FILE):
        try:
            with open(NICKNAMES_FILE, "r", encoding="UTF-8") as f:
                # Read key-value pairs into a dictionary while skipping empty lines and comments
                nicknames_dict = {}
                for line in f:
                    line = line.strip()
                    if line and not line.startswith("#"):
                        key, value = line.split(":")
                        nicknames_dict[key] = value
                return nicknames_dict.get(nickname)
        except Exception as e:
            print(f"Failed to parse ${NICKNAMES_FILE}: {e}")
    return None


def is_sso_profile(profile_name: str):
    """Determine if a profile in AWS CLI config comes from AWS SSO identity."""
    config = get_config_section(profile_name, section_type="profile")
    if "sso_session" in config and "sso_account_id" in config:
        return True
    else:
        return False


def initiate_new_sso_login(profile: str) -> None:
    """Authenticate AWS SSO using 'aws sso login' CLI command"""
    result = subprocess.run(
        ["aws", "sso", "login", "--profile", profile],
        capture_output=True,
        text=True,
        check=True,
    )
    if result.returncode != 0:
        print("Error: AWS SSO login failed.")
        sys.exit()


def get_profile_identity(profile: str) -> GetCallerIdentityResponseTypeDef:
    """Return results of sts.get_caller_identity() for an AWS profile"""
    session = boto3.Session(profile_name=profile)
    sts = session.client("sts")
    return sts.get_caller_identity()w


def validate_profile_and_get_identity(profile: str):
    identity = None
    if is_sso_profile(profile):
        try:
            identity = get_profile_identity(profile)
        except (
            SSOError,
            SSOTokenLoadError,
            UnauthorizedSSOTokenError,
            TokenRetrievalError,
            NoAuthTokenError,
        ) as e:
            print("No valid existing SSO token found. Let start a new session...")
            initiate_new_sso_login(profile)
    else:
        try:
            identity = get_profile_identity(profile)
        except Exception as e:
            print("Error: failed to validate credentials for profile ${profile}")
            print(e)
            sys.exit()
    return identity


def get_requested_name_from_args() -> str:
    parser = argparse.ArgumentParser(
        description="Open a bash subshell with AWS profile environment variables"
    )
    parser.add_argument("profile", type=str, help="AWS profile name or nickname")
    return parser.parse_args().profile


class ProfileNotInAwsConfig(Exception):
    pass


SectionType = Literal["profile", "sso-session"]


def is_chained_profile(profile: str):
    profile_config = get_config_section(profile, section_type="profile")

    if "role_arn" in profile_config and "source_profile" in profile_config:
        return True
    else:
        return False


def get_config_section(section_name: str, *, section_type: SectionType):
    section_heading = f"{section_type} {section_name}"
    if section_heading in AWS_CONFIG.sections():
        return AWS_CONFIG[section_heading]

    print(
        f"{section_type.capitalize()} '{section_name}' not found in {AWS_CONFIG_FILE}"
    )

    print("\nAvailable profiles to choose from:")
    print("-----------------------------------")
    at_least_one = False
    for option in AWS_CONFIG.sections():
        if option.startswith("profile "):
            print(option[8:])
            at_least_one = True
    if not at_least_one:
        print("no profiles found in ~/.aws/config")
    sys.exit()


def get_root_profile_of_chained_profile(profile: str):
    profile_config = get_config_section(profile, section_type="profile")
    if "source_profile" in profile_config:
        parent_profile = profile_config["source_profile"]
        return get_root_profile_of_chained_profile(parent_profile)
    else:
        return profile


@dataclass
class AwsSubshell:
    requested_profile: str
    chained_root_profile: Optional[str] = None
    check_for_valid_sso_token: Optional[bool] = False


def run_git_command(command):
    try:
        return (
            subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL)
            .decode()
            .strip()
        )
    except subprocess.CalledProcessError:
        return None


BLACK: str = r"\[\e[0;30m\]"
BLUE: str = r"\[\e[0;34m\]"
GREEN: str = r"\[\e[0;32m\]"
CYAN: str = r"\[\e[0;36m\]"
RED: str = r"\[\e[0;31m\]"
PURPLE: str = r"\[\e[0;35m\]"
BROWN: str = r"\[\e[0;33m\]"
LIGHT_GRAY: str = r"\[\e[0;37m\]"
DARK_GRAY: str = r"\[\e[1;30m\]"
LIGHT_BLUE: str = r"\[\e[1;34m\]"
LIGHT_GREEN: str = r"\[\e[1;32m\]"
LIGHT_CYAN: str = r"\[\e[1;36m\]"
LIGHT_RED: str = r"\[\e[1;31m\]"
LIGHT_PURPLE: str = r"\[\e[1;35m\]"
YELLOW: str = r"\[\e[1;33m\]"
WHITE: str = r"\[\e[1;37m\]"
RESET: str = r"\[\e[0m\]"
ORANGE: str = r"\[\e[38:5:208m\]"


def get_bash_prompt_for_profile(aws_profile: str, display_name: Optional[str] = None):
    profile_config = get_config_section(aws_profile, section_type="profile")
    profile_region = profile_config.get("region") or ""
    region_ps1 = f"{ORANGE}{profile_region}{RESET}"

    # Check git status
    hide_status = (
        run_git_command("git config --get devcontainers-theme.hide-status") != "1"
        and run_git_command("git config --get codespaces-theme.hide-status") != "1"
    )

    branch = run_git_command(
        "git --no-optional-locks symbolic-ref --short HEAD"
    ) or run_git_command("git --no-optional-locks rev-parse --short HEAD")

    show_dirty = (
        run_git_command("git config --get devcontainers-theme.show-dirty") == "1"
    )

    is_dirty = run_git_command(
        'git --no-optional-locks ls-files --error-unmatch -m --directory --no-empty-directory -o --exclude-standard ":/*"'
    )

    username = os.getenv("GITHUB_USER") or getpass.getuser()

    # Check for AWS_PROFILE_PS1 and GITHUB_USER
    ps1_profile = (
        f"{PURPLE}({YELLOW}{display_name or aws_profile} {region_ps1}{PURPLE}){RESET}"
    )

    ps1_user = f"{GREEN}{username}"

    ps1_dirty = f" {YELLOW}✗" if show_dirty and is_dirty else ""

    ps1_branch = f"{CYAN}({LIGHT_RED}{branch}{ps1_dirty}{CYAN})"

    ps1_workdir = f"{LIGHT_BLUE}\\w{RESET}"

    # Construct the prompt
    prompt = f"{ps1_user} ➜ {ps1_workdir} {ps1_branch} {ps1_profile} $ "

    return prompt


def main():
    # This might be a nickname or it might be a real profile name
    original_request = get_requested_name_from_args()

    if not file_exists(AWS_CONFIG_FILE):
        print(
            f"${AWS_CONFIG_FILE} not found. Please configure your AWS CLI or modify your"
            "devcontainer.json to mount your host's local ~/.aws/config file"
        )

    # Check if requested value in nickname file and if not, assume an explicit profile was requested
    aws_profile = get_aws_profile_from_nickname(original_request) or original_request

    if is_chained_profile(aws_profile):
        chained_root_profile = get_root_profile_of_chained_profile(aws_profile)
        print(
            f"Requested profile {aws_profile} is derived from profile {chained_root_profile} "
            "via profile chaining. First, we will validate that the parent profile is valid..."
        )
        validate_profile_and_get_identity(chained_root_profile)

    identity = validate_profile_and_get_identity(aws_profile)

    new_prompt = get_bash_prompt_for_profile(aws_profile, display_name=original_request)
    # os.environ["PS1"] = new_prompt
    os.environ["AWS_DEFAULT_PROFILE"] = aws_profile
    os.environ["AWS_PROFILE"] = aws_profile
    os.environ["PROMPT_DIRTRIM"] = "2"

    # Replace the current process with a new bash shell
    os.execl("/bin/bash", "/bin/bash", "-i")


if __name__ == "__main__":
    main()
